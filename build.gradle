plugins {
	id 'org.springframework.boot' version '2.2.6.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'io.swagger.core.v3.swagger-gradle-plugin' version '2.1.1'
	id "com.github.johnrengelman.processes" version "0.5.0"
	id "org.springdoc.openapi-gradle-plugin" version "1.0.0"
	id "org.openapi.generator" version "4.2.3"
}

group = 'fi.hartikat'
version = '0.0.3-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

openApi {
	apiDocsUrl.set("http://localhost:8080/api-docs")
	outputDir.set(file("$buildDir/specs"))
	outputFileName.set("oapi-spec.json")
	waitTimeInSeconds.set(300)
}

openApiGenerate {
	generatorName = "typescript-axios"
	inputSpec = "${buildDir}/specs/oapi-spec.json"
	outputDir = "${buildDir}/client"
	configOptions = [
			npmName: '@JiriHamberg/shop-product-service',
			npmVersion: "${project.version}",
			npmRepository: "https://npm.pkg.github.com/",
			supportsES6: "true"
	]
}

task createOapiGenOutDir() {
	def clientDir = new File(project.buildDir, "client")
	if (!clientDir.exists()) {
		clientDir.mkdirs()
	}
}

task publishClient(type: Exec, dependsOn: ['createOapiGenOutDir', 'generateOpenApiDocs', 'openApiGenerate']) {
	workingDir "${buildDir}/client"
	commandLine 'sh', '-c', 'npm install && npm run build && npm publish'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	//implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'

	implementation 'org.springdoc:springdoc-openapi-ui:1.3.2'
	implementation 'org.springdoc:springdoc-openapi-data-rest:1.3.2'

	implementation 'org.modelmapper:modelmapper:2.3.0'

	testImplementation 'io.rest-assured:rest-assured-common:4.2.0'
	testImplementation 'io.rest-assured:rest-assured:4.2.0'
	testImplementation 'io.rest-assured:json-path:4.2.0'
	testImplementation 'io.rest-assured:xml-path:4.2.0'
	testImplementation 'io.rest-assured:spring-mock-mvc:4.2.0'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
}
